<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" 
	xmlns="http://java.sun.com/xml/ns/javaee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
  <display-name></display-name>	
  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>
  <!-- 
   	<context-param>
        <param-name>serverName</param-name>
        <param-value>http://127.0.0.1:8080/</param-value>
    </context-param>
    <context-param>
        <param-name>casServerUrl</param-name>
        <param-value>https://cas.service.com:8443/</param-value> 
    </context-param>
    -->
    <!-- CAS Server 通知 CAS Client，删除session,注销登录信息 -->  
    <!-- 
   <filter>  
        <filter-name>CAS Single Sign Out Filter</filter-name>  
        <filter-class>  
            org.jasig.cas.client.session.SingleSignOutFilter  
        </filter-class>  
    </filter>  
    <filter-mapping>  
        <filter-name>CAS Single Sign Out Filter</filter-name>  
        <url-pattern>/*</url-pattern>  
    </filter-mapping> 
   <listener> 
        <listener-class>org.jasig.cas.client.session.SingleSignOutHttpSessionListener</listener-class> 
  </listener>  
  <filter>
  	<filter-name>CAS Authentication Filter</filter-name>
  	<filter-class>org.jasig.cas.client.authentication.AuthenticationFilter</filter-class>
	  <init-param>
	    <param-name>casServerLoginUrl</param-name>
	    <param-value>https://cas.service.com:8443/lzx-cas-server/login</param-value>
	  </init-param>
  </filter>
  <filter>
    <filter-name>CAS Validation Filter</filter-name>
    <filter-class>org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter</filter-class>
    <init-param>
        <param-name>casServerUrlPrefix</param-name>
        <param-value>https://cas.service.com:8443/lzx-cas-server</param-value>
    </init-param>
    <init-param>  
       <param-name>redirectAfterValidation</param-name>  
       <param-value>true</param-value>  
    </init-param>
    <init-param>  
        <param-name>encoding</param-name>  
        <param-value>UTF-8</param-value>  
    </init-param>
  </filter>
 
     该过滤器负责实现HttpServletRequest请求的包裹， 比如允许开发者通过HttpServletRequest的getRemoteUser()方法获得SSO登录用户的登录名，可选配置。
  
  <filter>
    <filter-name>CAS HttpServletRequest Wrapper Filter</filter-name>
    <filter-class>org.jasig.cas.client.util.HttpServletRequestWrapperFilter</filter-class>
  </filter> 
   <filter-mapping>
        <filter-name>CAS Authentication Filter</filter-name>
        <url-pattern>/loginPage.htm</url-pattern>
    </filter-mapping>
     
    <filter-mapping>
        <filter-name>CAS Validation Filter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
     
    <filter-mapping>
        <filter-name>CAS HttpServletRequest Wrapper Filter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
     -->
    <!-- 单点登入END -->
    
   	<!-- 启动Web容器时自动装载contextConfigLocation配置信息，这段属于spring的配置 -->
 	<listener>
    	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <context-param>
    	<param-name>contextConfigLocation</param-name>
    	<param-value>
    		classpath:config/spring/app-*.xml
    	</param-value>
    </context-param>
    <!-- 注册Spring的request作用域,通过配置Controller类名上的@scope来控制,默认是单例Singleton-->
    <listener>
    	<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>
    <filter>
    	<filter-name>characterEncodingFilter</filter-name>
    	<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    	<init-param>
    		<param-name>encoding</param-name>
    		<param-value>UTF-8</param-value>
    	</init-param>
    	<init-param>
    		<param-name>forceEncoding</param-name>
    		<param-value>true</param-value>
    	</init-param>
    </filter>
    <filter-mapping>
    	<filter-name>characterEncodingFilter</filter-name>
    	<url-pattern>/*</url-pattern>
    </filter-mapping>
    <!-- 自定义的filter,在用户登录成功之后进行处理 
    <filter>
	    <filter-name>authority</filter-name>
	    <filter-class>com.frame.authority.filter.AuthorityFilter</filter-class>
	</filter>
	<filter-mapping>
	    <filter-name>authority</filter-name>
	    <url-pattern>*.htm</url-pattern>
	</filter-mapping>
	--> 
	
	<!-- Spring 刷新Introspector防止内存泄露 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>
    <servlet>
    	<servlet-name>Spring MVC Dispatcher Servlet</servlet-name>
    	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    	<init-param>
    		<param-name>contextConfigLocation</param-name>
    		<param-value>
    			classpath:config/spring/springMvc-servlet.xml
    		</param-value>
    	</init-param>
    	<load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>Spring MVC Dispatcher Servlet</servlet-name>
        <url-pattern>*.htm</url-pattern>
    </servlet-mapping>
    <!--********************* spring 3.2 配置end ******************-->

    <!--********************* mq配置 ******************************-->
    <!-- <context-param>
        <param-name>org.apache.activemq.brokerURL</param-name>
        <param-value>failover://(tcp://127.0.0.1:61616)?randomize=false</param-value>
        <description>The URL of the Message Broker to connect to</description>
    </context-param>
    <context-param>
        <param-name>org.apache.activemq.embeddedBroker</param-name>
        <param-value>true</param-value>
        <description>Whether we should include an embedded broker or not</description>
    </context-param>
    
	<filter>
		<filter-name>session</filter-name>
		<filter-class>org.apache.activemq.web.SessionFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>session</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<listener>
		<listener-class>org.apache.activemq.web.SessionListener</listener-class>
	</listener>
	<servlet>
        <servlet-name>AjaxServlet</servlet-name>
        <servlet-class>org.apache.activemq.web.AjaxServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
        <async-supported>true</async-supported>
    </servlet>
    
    <servlet-mapping>
      <servlet-name>AjaxServlet</servlet-name>
      <url-pattern>/amq/*</url-pattern>
    </servlet-mapping> -->
    
    <!--****************** mq配置end *************************-->
    
     <!-- begin XFire webservice配置 -->
	<!-- <servlet>
		<servlet-name>xfire</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet
		</servlet-class>
	</servlet>
	<servlet>
		 配合Spring容器中XFire一起工作的Servlet 
		<servlet-name>xfireServlet</servlet-name>
		<servlet-class>org.codehaus.xfire.spring.XFireSpringServlet
		</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>xfireServlet</servlet-name>
		 在这个URI下开放Web Service服务 
		<url-pattern>/services/*</url-pattern>
	</servlet-mapping> -->
	<!-- end XFire 配置 -->
	
    <error-page> 
		<error-code>404</error-code>
		<location>/404.jsp</location> 
	</error-page>
	<error-page>
		<error-code>500</error-code>
		<location>/500.jsp</location> 
	</error-page>
    <!-- session超时定义,单位为分钟 -->
	<session-config>
		<session-timeout>20</session-timeout>
	</session-config>
</web-app>
